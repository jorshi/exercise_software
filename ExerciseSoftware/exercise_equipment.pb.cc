// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exercise_equipment.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "exercise_equipment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace exercise_protobuf {

namespace {

const ::google::protobuf::Descriptor* Equipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gym_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gym_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_exercise_5fequipment_2eproto() {
  protobuf_AddDesc_exercise_5fequipment_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "exercise_equipment.proto");
  GOOGLE_CHECK(file != NULL);
  Equipment_descriptor_ = file->message_type(0);
  static const int Equipment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, type_),
  };
  Equipment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Equipment_descriptor_,
      Equipment::default_instance_,
      Equipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _has_bits_[0]),
      -1,
      -1,
      sizeof(Equipment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _internal_metadata_),
      -1);
  Gym_descriptor_ = file->message_type(1);
  static const int Gym_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gym, equipment_),
  };
  Gym_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gym_descriptor_,
      Gym::default_instance_,
      Gym_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gym, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gym),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gym, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_exercise_5fequipment_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Equipment_descriptor_, &Equipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gym_descriptor_, &Gym::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_exercise_5fequipment_2eproto() {
  delete Equipment::default_instance_;
  delete Equipment_reflection_;
  delete Gym::default_instance_;
  delete Gym_reflection_;
}

void protobuf_AddDesc_exercise_5fequipment_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030exercise_equipment.proto\022\021exercise_pro"
    "tobuf\"%\n\tEquipment\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002"
    " \002(\t\"6\n\003Gym\022/\n\tequipment\030\001 \003(\0132\034.exercis"
    "e_protobuf.Equipment", 140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "exercise_equipment.proto", &protobuf_RegisterTypes);
  Equipment::default_instance_ = new Equipment();
  Gym::default_instance_ = new Gym();
  Equipment::default_instance_->InitAsDefaultInstance();
  Gym::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_exercise_5fequipment_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_exercise_5fequipment_2eproto {
  StaticDescriptorInitializer_exercise_5fequipment_2eproto() {
    protobuf_AddDesc_exercise_5fequipment_2eproto();
  }
} static_descriptor_initializer_exercise_5fequipment_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Equipment::kIdFieldNumber;
const int Equipment::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Equipment::Equipment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:exercise_protobuf.Equipment)
}

void Equipment::InitAsDefaultInstance() {
}

Equipment::Equipment(const Equipment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:exercise_protobuf.Equipment)
}

void Equipment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equipment::~Equipment() {
  // @@protoc_insertion_point(destructor:exercise_protobuf.Equipment)
  SharedDtor();
}

void Equipment::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Equipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equipment_descriptor_;
}

const Equipment& Equipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exercise_5fequipment_2eproto();
  return *default_instance_;
}

Equipment* Equipment::default_instance_ = NULL;

Equipment* Equipment::New(::google::protobuf::Arena* arena) const {
  Equipment* n = new Equipment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Equipment::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    id_ = 0;
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Equipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exercise_protobuf.Equipment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exercise_protobuf.Equipment.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exercise_protobuf.Equipment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exercise_protobuf.Equipment)
  return false;
#undef DO_
}

void Equipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exercise_protobuf.Equipment)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exercise_protobuf.Equipment.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exercise_protobuf.Equipment)
}

::google::protobuf::uint8* Equipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:exercise_protobuf.Equipment)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exercise_protobuf.Equipment.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exercise_protobuf.Equipment)
  return target;
}

int Equipment::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
int Equipment::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equipment::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Equipment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Equipment>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equipment::MergeFrom(const Equipment& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Equipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equipment::CopyFrom(const Equipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Equipment::Swap(Equipment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Equipment::InternalSwap(Equipment* other) {
  std::swap(id_, other->id_);
  type_.Swap(&other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Equipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equipment_descriptor_;
  metadata.reflection = Equipment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Equipment

// required int32 id = 1;
bool Equipment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Equipment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Equipment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Equipment::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Equipment::id() const {
  // @@protoc_insertion_point(field_get:exercise_protobuf.Equipment.id)
  return id_;
}
 void Equipment::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:exercise_protobuf.Equipment.id)
}

// required string type = 2;
bool Equipment::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Equipment::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Equipment::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Equipment::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& Equipment::type() const {
  // @@protoc_insertion_point(field_get:exercise_protobuf.Equipment.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Equipment::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:exercise_protobuf.Equipment.type)
}
 void Equipment::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:exercise_protobuf.Equipment.type)
}
 void Equipment::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:exercise_protobuf.Equipment.type)
}
 ::std::string* Equipment::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:exercise_protobuf.Equipment.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Equipment::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Equipment::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:exercise_protobuf.Equipment.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gym::kEquipmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gym::Gym()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:exercise_protobuf.Gym)
}

void Gym::InitAsDefaultInstance() {
}

Gym::Gym(const Gym& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:exercise_protobuf.Gym)
}

void Gym::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gym::~Gym() {
  // @@protoc_insertion_point(destructor:exercise_protobuf.Gym)
  SharedDtor();
}

void Gym::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gym::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gym::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gym_descriptor_;
}

const Gym& Gym::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exercise_5fequipment_2eproto();
  return *default_instance_;
}

Gym* Gym::default_instance_ = NULL;

Gym* Gym::New(::google::protobuf::Arena* arena) const {
  Gym* n = new Gym;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gym::Clear() {
  equipment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gym::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:exercise_protobuf.Gym)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .exercise_protobuf.Equipment equipment = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_equipment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_equipment;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:exercise_protobuf.Gym)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:exercise_protobuf.Gym)
  return false;
#undef DO_
}

void Gym::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:exercise_protobuf.Gym)
  // repeated .exercise_protobuf.Equipment equipment = 1;
  for (unsigned int i = 0, n = this->equipment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:exercise_protobuf.Gym)
}

::google::protobuf::uint8* Gym::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:exercise_protobuf.Gym)
  // repeated .exercise_protobuf.Equipment equipment = 1;
  for (unsigned int i = 0, n = this->equipment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exercise_protobuf.Gym)
  return target;
}

int Gym::ByteSize() const {
  int total_size = 0;

  // repeated .exercise_protobuf.Equipment equipment = 1;
  total_size += 1 * this->equipment_size();
  for (int i = 0; i < this->equipment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gym::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gym* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Gym>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gym::MergeFrom(const Gym& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  equipment_.MergeFrom(from.equipment_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gym::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gym::CopyFrom(const Gym& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gym::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->equipment())) return false;
  return true;
}

void Gym::Swap(Gym* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gym::InternalSwap(Gym* other) {
  equipment_.UnsafeArenaSwap(&other->equipment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gym::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gym_descriptor_;
  metadata.reflection = Gym_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gym

// repeated .exercise_protobuf.Equipment equipment = 1;
int Gym::equipment_size() const {
  return equipment_.size();
}
void Gym::clear_equipment() {
  equipment_.Clear();
}
const ::exercise_protobuf::Equipment& Gym::equipment(int index) const {
  // @@protoc_insertion_point(field_get:exercise_protobuf.Gym.equipment)
  return equipment_.Get(index);
}
::exercise_protobuf::Equipment* Gym::mutable_equipment(int index) {
  // @@protoc_insertion_point(field_mutable:exercise_protobuf.Gym.equipment)
  return equipment_.Mutable(index);
}
::exercise_protobuf::Equipment* Gym::add_equipment() {
  // @@protoc_insertion_point(field_add:exercise_protobuf.Gym.equipment)
  return equipment_.Add();
}
::google::protobuf::RepeatedPtrField< ::exercise_protobuf::Equipment >*
Gym::mutable_equipment() {
  // @@protoc_insertion_point(field_mutable_list:exercise_protobuf.Gym.equipment)
  return &equipment_;
}
const ::google::protobuf::RepeatedPtrField< ::exercise_protobuf::Equipment >&
Gym::equipment() const {
  // @@protoc_insertion_point(field_list:exercise_protobuf.Gym.equipment)
  return equipment_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace exercise_protobuf

// @@protoc_insertion_point(global_scope)
